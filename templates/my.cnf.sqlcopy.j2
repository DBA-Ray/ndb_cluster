[mysqld]

# ndb parameters
  ndbcluster = on
  ndb-nodeid = 200
  ndb-connectstring = {{ hostvars[groups['slave'][0]]['inventory_hostname_short'] }}:1186
  ndb_log_update_as_write = 0 #异步复制到其他存储引擎需设置0
  ndb_log_bin = 1
# daemonize = ON
  ndb-wait-setup = 1
  ndb-batch-size = 1
  ndb-blob-read-batch-bytes = 1
  ndb-blob-write-batch-bytes = 1
  ndb_read_backup = 1
  default-storage-engine = ndbcluster

# 二进制日志
  log_bin = mysql-bin
  log_bin_index = mysql-bin.index
  server_id = 1
  binlog_format = row
  binlog_expire_logs_seconds = 604800
  binlog_transaction_dependency_tracking = WRITESET
  binlog_order_commits = 0
  binlog_checksum = CRC32
  binlog_transaction_compression = 0
  binlog_transaction_compression_level_zstd = 7 #（1-22）
  transaction_write_set_extraction = XXHASH64 #以便在server收集写集合的同时将其记录到二进制日志。写集合基于每行的主键，并且是行更改后的唯一标识此标识将用于检测冲突。
  sync_binlog = 1 #最安全，最多丢失一个事务，需要SSD磁盘，ext4格式
  binlog_rows_query_log_events = 1

# per_thread_buffers
  join_buffer_size = 2M #处理逻辑是驱动表的一行和非驱动表联合查找，这时就可以将非驱动表放入join_buffer，不需要访问拥有并发保护机制的buffer_pool
  sort_buffer_size = 2M #执行order by和group by分配，用于存储排序的中间结果，当分配空间大于2M时会使用mmap而不是malloc来进行内存分配，导致效率降低
  read_rnd_buffer_size = 32M #当thread进行随机扫描数据时会首先扫描该buffer空间以避免更多的物理读，放大以使用MRR
  read_buffer_size = 2M #当thread进行顺序扫描数据时会首先扫描该buffer空间以避免更多的物理读
  binlog_cache_size = 2M #用于在事务期间保存对二进制日志的更改的内存缓冲区的大小
  binlog_stmt_cache_size = 32k #用于在非事务期间保存对二进制日志的更改的内存缓冲区的大小

# basic
  basedir = /usr/sbin/
  plugin_dir = /usr/lib64/mysql/plugin
  lc_messages_dir = /usr/share/mysql-8.0
  character_sets_dir = /usr/share/mysql-8.0/charsets
  datadir = {{ sql_node_data_dir }}
  tmpdir = {{ sql_node_data_dir }}
  socket = /var/lib/mysql/mysql.sock
  log-error = {{ sql_node_dir }}/mysqld.log
  pid-file = /var/run/mysqld/mysqld.pid
  default_authentication_plugin = mysql_native_password
  port = {{ mysql_port }}
  character_set_server = utf8mb4
  collation_server = utf8mb4_0900_ai_ci
  auto_increment_offset = 1
  auto_increment_increment = 1

# 日志时间戳改为系统
  log_timestamps = system

# repilication_settings
#  gtid_mode = on
#  enforce_gtid_consistency = true
  master_info_repository = TABLE
  relay_log_info_repository = TABLE
  slave_parallel_type = logical_clock
  slave_parallel_workers = 16
  slave_preserve_commit_order = on
  slave_allow_batching=1
  log_slave_updates = 1
  relay_log = relay
  relay_log_index = relay.index

# 开启慢查询
  long_query_time = 0.5
  slow_query_log = 1
  slow_query_log_file = {{ sql_node_dir }}/slow.log

# 记录管理语句
  log_slow_admin_statements = 1

# 连接数优化
  max_connections = 2000
  max_connect_errors = 100000
  max_allowed_packet = 1073741824 #（1G）

# thread optimization
  thread_cache_size = 400 #default value: 8 + (max_connections / 100) maxvalue: 100

# table缓存优化（建议10倍于max_connections）
  table_open_cache = 20000
  table_definition_cache = 20000

# 避免MySQL的外部锁定，减少出错几率增强稳定性。
  skip_external_locking

# 死锁记录至error_log
  innodb_print_all_deadlocks = 1

# 关闭时间戳默认值
  explicit_defaults_for_timestamp = 1

# 安全加固
  user = mysql
  #skip_name_resolve #生产环境中必须设置这个参数，否则反向解析缓慢时，会导致MySQL连接缓慢，出现严重的性能问题
  local_infile = 1 #使用loadDump函数必备

# 超时时间
  wait_timeout = 3600
  interactive_timeout = 3600

[mysql]

  socket=/var/lib/mysql/mysql.sock

[client]

  socket=/var/lib/mysql/mysql.sock