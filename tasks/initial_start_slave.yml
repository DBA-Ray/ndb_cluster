#initial the slave for ndb cluster
- name: Create directories for slave
  file: path={{ item }} state=directory owner=mysql group=mysql
  with_items:
    - "{{ shelldir }}"
    - "{{ monitordir }}"
    - "{{ basedir }}"

- name: Rendering mysql parameter file
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: mysql
    group: mysql
    mode: 0644
  with_items:
    - { src: 'mysql.conf.j2', dest: '/usr/lib/tmpfiles.d/mysql.conf' }
    - { src: 'mysqld.service.j2', dest: '/usr/lib/systemd/system/mysqld.service' }
    - { src: 'my.cnf.j2', dest: "{{ basedir }}/my.cnf" }

- name: Force systemd to reload configs
  systemd:
    daemon_reload: yes

- name: Rendering bash file
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: root
    group: root
    mode: 0744
  with_items:
    - { src: 'my.cnf_auto.sh.j2', dest: "{{ basedir }}/my.cnf_auto.sh" }
    - { src: 'see_log.sh.j2', dest: "{{ shelldir }}/see_log.sh" }
    - { src: 'asynchronous_connection_failover.sh.j2', dest: "{{ shelldir }}/asynchronous_connection_failover.sh" }

- name: Auto config my.cnf
  shell: "sh -x {{ basedir }}/my.cnf_auto.sh"

- name: Remove my.cnf_auto.sh
  file:
    path: "{{ basedir }}/my.cnf_auto.sh"
    state: absent
    remote_src: yes

- name: Obtain user_whitelist
  shell: "cat /tmp/user_whitelist.txt"
  register: user_whitelist

- name: Install the ndb cluster repo
  yum:
    name: "{{ remote_repo }}"
    state: present

- name: Copy the mysql-community.repo
  copy: src=mysql-community.repo dest=/etc/yum.repos.d/mysql-community.repo

- name: Install the ndb cluster basic rpm
  yum:
    name: ["{{ cluster_server_name }}", "{{ cluster_lib_compat_name }}", "mysql-shell"]
    state: present
  register: result
  retries: 7
  until: result is succeeded

- name: Initial mysql server
  shell: "{{ item }}"
  with_items:
    - "/usr/sbin/mysqld --defaults-file={{ basedir }}/my.cnf --user=mysql \
    --initialize-insecure --basedir={{ basedir }} --datadir={{ datadir }}"
    - "/usr/bin/mysql_ssl_rsa_setup --datadir={{ datadir }}"

- name: Clean system's buffer and cache
  shell: "sysctl -w vm.drop_caches=1"

- name: Start mysql server
  systemd:
    name: mysqld
    state: started

- name: Enable mysql server
  systemd:
    name: mysqld
    state: started
    enabled: yes

- name: Modify root password
  mysql_user:
    login_user: root
    login_password:
    name: root
    password: "{{ root_password }}"
    update_password: always
    login_port: "{{ mysql_port }}"
    priv: '*.*:ALL,GRANT'
    login_unix_socket: /var/lib/mysql/mysql.sock
    state: present

- name: Add remote root user
  mysql_user:
    login_user: root
    login_password: "{{ root_password }}"
    name: root
    password: "{{ root_password }}"
    update_password: always
    login_port: "{{ mysql_port }}"
    host: "{{ user_whitelist.stdout }}"
    priv: '*.*:ALL,GRANT'
    sql_log_bin: no
    login_unix_socket: /var/lib/mysql/mysql.sock
    state: present

- name: Add repl user
  mysql_user:
    login_user: root
    login_password: "{{ root_password }}"
    name: repl
    password: "{{ mysql_monitor_password }}"
    update_password: always
    login_port: "{{ mysql_port }}"
    host: "{{ user_whitelist.stdout }}"
    priv: '*.*:REPLICATION SLAVE,SUPER,REPLICATION CLIENT,SELECT'
    sql_log_bin: no
    login_unix_socket: /var/lib/mysql/mysql.sock
    state: present

- name: Add pmm user
  mysql_user:
    login_user: root
    login_password: "{{ root_password }}"
    name: pmm
    password: "{{ pmm_password }}"
    update_password: always
    login_port: "{{ mysql_port }}"
    host: 127.0.0.1
    priv: '*.*:SELECT,RELOAD,PROCESS,SUPER,REPLICATION CLIENT/PERFORMANCE_SCHEMA.*:SELECT,UPDATE,DELETE,DROP'
    sql_log_bin: no
    login_unix_socket: /var/lib/mysql/mysql.sock
    state: present

- name: Add audit user
  mysql_user:
    login_user: root
    login_password: "{{ root_password }}"
    name: repl
    password: "{{ mysql_monitor_password }}"
    update_password: always
    login_port: "{{ mysql_port }}"
    host: "{{ user_whitelist.stdout }}"
    priv: '*.*:REPLICATION SLAVE,SUPER,REPLICATION CLIENT'
    sql_log_bin: no
    login_unix_socket: /var/lib/mysql/mysql.sock
    state: present

- name: Add business user
  mysql_user:
    login_user: root
    login_password: "{{ root_password }}"
    name: "{{ business_user }}"
    password: "{{ business_password }}"
    update_password: always
    login_port: "{{ mysql_port }}"
    host: "{{ user_whitelist.stdout }}"
    priv: "{{ business_user }}.*:SELECT,UPDATE,DELETE,INSERT"
    sql_log_bin: no
    login_unix_socket: /var/lib/mysql/mysql.sock
    state: present

- name: Config replication for ndb
  mysql_replication:
    login_port: "{{ mysql_port }}"
    login_user: root
    login_password: "{{ root_password }}"
    login_unix_socket: /var/lib/mysql/mysql.sock
    mode: changemaster
    master_host: "{{ master_host }}"
    master_port: "{{ mysql_port }}"
    master_user: repl
    master_password: "{{ mysql_monitor_password }}"
    master_auto_position: no
    master_log_file: mysql-bin.000001
    master_log_pos: 152
  when: not asynchronous_connection_failover | default (True)

#- name: Config asynchronous_connection_failover
#  shell: "sh -x {{ shelldir }}/asynchronous_connection_failover.sh '{{ root_password }}' '{{ mysql_monitor_password }}'"

- name: Start slave status for slaves
  mysql_replication:
    login_port: "{{ mysql_port }}"
    login_user: root
    login_password: "{{ root_password }}"
    login_unix_socket: /var/lib/mysql/mysql.sock
    mode: startslave