#initial for ndb cluster auto installer
- name: Ensure group "mysqlcluster" exists
  group:
    name: mysqlcluster
    state: present

- name: Ensure the user "mysqlcluster" exists
  user:
    name: mysqlcluster
    group: mysqlcluster
    password: "{{ mysqlcluster_password | password_hash('sha512') }}"
    update_password: always

- name: Create directories for mysqlcluster
  file: path={{ item }} state=directory owner=mysqlcluster group=mysqlcluster
  with_items:
    - "{{ package_dir }}"
    - "{{ shelldir }}"
    - "{{ monitordir }}"
    - "{{ basedir }}"
    - "{{ etcdir }}"
    - "{{ logdir }}"
  when: ansible_hostname != "ansible"

- name: Install the ndb cluster repo
  yum:
    name: "{{ remote_repo }}"
    state: present

- name: Copy the mysql-community.repo
  copy: src=mysql-community.repo dest=/etc/yum.repos.d/mysql-community.repo

- name: Install the ndb cluster basic rpm
  yum:
    name: ["{{ cluster_server_name }}", "{{ cluster_lib_compat_name }}", "{{ date_node_name }}", "{{ ndb_client_name }}", "{{ management_server_name }}", "{{ cluster_embedded_name }}", "{{ cluster_memcached_name }}"] 
    state: present
  register: result
  retries: 7
  until: result is succeeded

- name: Install the auto installer
  yum:
    name: "mysql-cluster-community-auto-installer-{{ ndb_version }}"
    state: present
  when: ansible_hostname == "ansible"

- name: Install the required software on set-up host
  pip:
    name: [cryptography, paramiko]
  when: ansible_hostname == "ansible"

- name: Remove /root/.mcc/mcc.pid
  file:
    path: /root/.mcc/mcc.pid
    state: absent
  when: whether_uninstall and (ansible_hostname == "ansible")

- name: Start the web server for auto installer
  shell: "echo '/usr/bin/ndb_setup.py -p {{ web_port }} -N 0.0.0.0' > /root/.mcc/ndb_auto.txt"
  when: ansible_hostname == "ansible"

- name: Add mysql parameters for deploy.js
  blockinfile:
    path: /usr/share/mysql-8.0/mcc/frontend/js/mcc/configuration/deploy.js
    marker: "        /* {mark} ANSIBLE MANAGED BLOCK */"
    insertafter: "        configFile.name = 'my.cnf';"
    block: |
      /***DBA RAY***/
              addln(configFile, 'default-storage-engine=ndbcluster');
              addln(configFile, 'character_set_server=utf8mb4');
              addln(configFile, 'collation_server=utf8mb4_0900_ai_ci');
              addln(configFile, 'default_authentication_plugin=mysql_native_password');
              addln(configFile, 'lower_case_table_names=1');
              addln(configFile, 'long_query_time=0.1');
              addln(configFile, 'slow_query_log=1');
              addln(configFile, 'slow_query_log_file=/data/log/slow.log');
              addln(configFile, 'max_connections=2000');
              addln(configFile, 'max_connect_errors=200000');
              addln(configFile, 'max_allowed_packet=1073741824');
              addln(configFile, 'skip_external_locking');
              addln(configFile, 'skip_name_resolve');
              addln(configFile, 'wait_timeout=3600');
              addln(configFile, 'interactive_timeout=3600');
              addln(configFile, 'log_timestamps=system');
              addln(configFile, 'binlog_transaction_dependency_tracking=WRITESET');
              addln(configFile, 'transaction_write_set_extraction=XXHASH64');
              addln(configFile, 'binlog_expire_logs_seconds=604800');
              addln(configFile, 'binlog_format=row');
              addln(configFile, 'ndb_cluster_connection_pool=8');
  when: ansible_hostname == "ansible"

- name: Rendering parameters.js file
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: root
    group: root
    mode: 0644
  with_items:
    - { src: 'parameters.js.j2', dest: '/usr/share/mysql-8.0/mcc/frontend/js/mcc/configuration/parameters.js' }
  when: ansible_hostname == "ansible"