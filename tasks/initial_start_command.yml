#initial for ndb cluster auto installer
- name: Ensure group "mysqlcluster" exists
  group:
    name: mysqlcluster
    state: present

- name: Ensure the user "mysqlcluster" exists
  user:
    name: mysqlcluster
    group: mysqlcluster
    password: "{{ mysqlcluster_password | password_hash('sha512') }}"
    update_password: always

- name: Install the ndb cluster repo
  yum:
    name: "{{ remote_repo }}"
    state: present

- name: Copy the mysql-community.repo
  copy: src=mysql-community.repo dest=/etc/yum.repos.d/mysql-community.repo

- name: Install the ndb cluster basic rpm
  yum:
    name: ["{{ cluster_server_name }}", "{{ cluster_lib_compat_name }}", "{{ date_node_name }}", "{{ ndb_client_name }}", "{{ management_server_name }}", "{{ cluster_embedded_name }}", "{{ cluster_memcached_name }}"]
    state: present
  register: result
  retries: 7
  until: result is succeeded

- name: Create directories for mysqlcluster
  file: path={{ item }} state=directory owner=mysqlcluster group=mysqlcluster
  with_items:
    - "{{ package_dir }}"
    - "{{ shelldir }}"
    - "{{ monitordir }}"
    - "{{ basedir }}"
    - "{{ etcdir }}"
    - "{{ logdir }}"
  when: ansible_hostname in groups.sql_node

- name: Rendering mysql parameter file
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: mysql
    group: mysql
    mode: 0644
  with_items:
    - { src: 'mysql.conf.j2', dest: '/usr/lib/tmpfiles.d/mysql.conf' }
    - { src: 'mysqld.service.j2', dest: '/usr/lib/systemd/system/mysqld.service' }
    - { src: 'my.cnf.j2', dest: "{{ etcdir }}/my.cnf" }
  when: ansible_hostname in groups.sql_node

- name: Rendering bash file
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: root
    group: root
    mode: 0744
  with_items:
    - { src: 'my.cnf_auto.sh.j2', dest: "{{ etcdir }}/my.cnf_auto.sh" }
    - { src: 'see_log.sh.j2', dest: "{{ shelldir }}/see_log.sh" }
  when: ansible_hostname in groups.sql_node

- name: Auto config my.cnf
  shell: "sh -x {{ etcdir }}/my.cnf_auto.sh"
  when: ansible_hostname in groups.sql_node

- name: Remove my.cnf_auto.sh
  file:
    path: "{{ etcdir }}/my.cnf_auto.sh"
    state: absent
    remote_src: yes
  when: ansible_hostname in groups.sql_node

- name: Obtain user_whitelist
  shell: "cat /tmp/user_whitelist.txt"
  register: user_whitelist
  when: ansible_hostname in groups.sql_node

- name: Initial mysql server
  shell: "{{ item }}"
  with_items:
    - "{{ basedir }}/bin/mysqld --defaults-file={{ etcdir }}/my.cnf --user=mysql --lower-case-table-names=1 \
    --initialize-insecure --basedir={{ basedir }} --datadir={{ datadir }}"
    - "{{ basedir }}/bin/mysql_ssl_rsa_setup --datadir={{ datadir }}"
  when: ansible_hostname in groups.sql_node

- name: Create directories for mysqlcluster
  file: path={{ item }} state=directory owner=mysqlcluster group=mysqlcluster
  with_items:
    - "{{ basedir }}"
  when: ansible_hostname in groups.data_node or ansible_hostname == "ansbile"

- name: Rendering config.ini file
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: mysql
    group: mysql
    mode: 0644
  with_items:
    - { src: 'config.ini.j2', dest: '{{ basedir }}/config.ini' }
  when: ansible_hostname == "ansbile"