#initial for ndb cluster via commands

- name: Install the ndb cluster repo
  yum:
    name: "{{ remote_repo }}"
    state: present
  register: repo
  retries: 7
  until: repo is succeeded

- name: Copy the mysql-community.repo
  copy: src=mysql-community.repo dest=/etc/yum.repos.d/mysql-community.repo

#######sql_node#######

- name: Create directories for sql_node
  file: path={{ item }} state=directory owner=mysql group=mysql
  with_items:
    - "{{ shelldir }}"
    - "{{ monitordir }}"
    - "{{ sql_node_dir }}"
    - "{{ sql_node_data_dir }}"
  when: inventory_hostname_short in groups.sql_node

- name: Rendering mysql parameter file
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: mysql
    group: mysql
    mode: 0644
  with_items:
    - { src: 'mysql.conf.sql.j2', dest: '/usr/lib/tmpfiles.d/mysql.conf' }
    - { src: 'mysqld.service.sql.j2', dest: '/usr/lib/systemd/system/mysqld.service' }
    - { src: 'my.cnf.sql.j2', dest: "{{ sql_node_dir }}/my.cnf" }
  when: inventory_hostname_short in groups.sql_node

- name: Force systemd to reread configs
  systemd:
    daemon_reload: yes
  when: inventory_hostname_short in groups.sql_node

- name: Rendering bash file
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: root
    group: root
    mode: 0744
  with_items:
    - { src: 'my.cnf_auto.sh.sql.j2', dest: "{{ sql_node_dir }}/my.cnf_auto.sh" }
  when: inventory_hostname_short in groups.sql_node

- name: Auto config my.cnf
  shell: "sh -x {{ sql_node_dir }}/my.cnf_auto.sh"
  when: inventory_hostname_short in groups.sql_node

- name: Remove my.cnf_auto.sh
  file:
    path: "{{ sql_node_dir }}/my.cnf_auto.sh"
    state: absent
    remote_src: yes
  when: inventory_hostname_short in groups.sql_node

- name: Obtain user_whitelist
  shell: "cat /tmp/user_whitelist.txt"
  register: user_whitelist
  when: inventory_hostname_short in groups.sql_node

- name: Install the ndb cluster sql server
  yum:
    name: ["{{ cluster_server_name }}", "{{ cluster_lib_compat_name }}", "mysql-shell"]
    state: present
  register: result
  retries: 7
  until: result is succeeded
  when: inventory_hostname_short in groups.sql_node

- name: Initial mysql server
  shell: "{{ item }}"
  with_items:
    - "/usr/sbin/mysqld --defaults-file={{ sql_node_dir }}/my.cnf --user=mysql \
    --initialize-insecure --basedir={{ sql_node_dir }} --datadir={{ sql_node_data_dir }}"
    - "/usr/bin/mysql_ssl_rsa_setup --datadir={{ sql_node_data_dir }}"
  when: inventory_hostname_short in groups.sql_node

- name: Enable mysql server
  systemd:
    name: mysqld
    enabled: yes
  when: inventory_hostname_short in groups.sql_node

#######data_node#######

- name: Create directories for data_node
  file: path={{ item }} state=directory owner=mysql group=mysql
  with_items:
    - "{{ data_node_dir }}"
  when: inventory_hostname_short in groups.data_node

- name: Install the ndb cluster data server
  yum:
    name: ["{{ date_node_name }}", "{{ ndb_client_name }}", "{{ cluster_embedded_name }}", "{{ cluster_memcached_name }}"]
    state: present
  register: result
  retries: 7
  until: result is succeeded
  when: inventory_hostname_short in groups.data_node

#######management_node#######

- name: Create directories for management_node
  file: path={{ item }} state=directory owner=mysql group=mysql
  with_items:
    - "{{ management_node_dir }}"
  when: inventory_hostname_short == "ansible"

- name: Rendering management_node parameter file
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: mysql
    group: mysql
    mode: 0644
  with_items:
    - { src: 'config.ini.j2', dest: "{{ management_node_dir }}/config.ini" }
    - { src: 'config_auto.sh.j2', dest: "{{ management_node_dir }}/config_auto.sh" }
  when: inventory_hostname_short == "ansible"

- name: Auto config config.ini
  shell: "sh -x {{ management_node_dir }}/config_auto.sh"
  when: inventory_hostname_short == "ansible"

- name: Remove config_auto.sh
  file:
    path: "{{ management_node_dir }}/config_auto.sh"
    state: absent
    remote_src: yes
  when: inventory_hostname_short == "ansible"

- name: Install the ndb cluster management server
  yum:
    name: ["{{ management_server_name }}","{{ cluster_client_name }}"]
    state: present
  register: result
  retries: 7
  until: result is succeeded
  when: inventory_hostname_short == "ansible"

#######start cluster#######
- name: Clean system's buffer and cache
  shell: "sysctl -w vm.drop_caches=1"

- name: Start management_node
  shell: "/usr/bin/numactl --interleave=all ndb_mgmd --config-file={{ management_node_dir }}/config.ini --initial --ndb-nodeid=237 --config-dir={{ management_node_dir }}/"
  tags: startup
  when: inventory_hostname_short == "ansible"

- name: Start data_node
  shell: "/usr/bin/numactl --interleave=all ndbmtd --ndb-connectstring=ansible:1186"
  tags: startup
  when: inventory_hostname_short in groups.data_node

- name: Wait data nodes started
  shell: "grep finished {{ data_node_dir }}/ndb_1_out.log | tail -1 | awk '{print $15,$16}'"
  register: started
  until: started.stdout.startswith("restart finished")
  retries: 10
  delay: 30
  when: inventory_hostname_short == "ndb1"
  tags: startup

- name: Start sql_node
  systemd:
    name: mysqld
    state: started
  tags: startup
  when: inventory_hostname_short in groups.sql_node

- name: Modify root password
  mysql_user:
    login_user: root
    login_password:
    name: root
    password: "{{ root_password }}"
    update_password: always
    login_port: "{{ mysql_port }}"
    priv: '*.*:ALL,GRANT'
    login_unix_socket: /var/lib/mysql/mysql.sock
    state: present
  when: inventory_hostname_short in groups.sql_node

- name: Add remote root user
  mysql_user:
    login_user: root
    login_password: "{{ root_password }}"
    name: root
    password: "{{ root_password }}"
    update_password: always
    login_port: "{{ mysql_port }}"
    host: "{{ user_whitelist.stdout }}"
    priv: '*.*:ALL,GRANT'
    sql_log_bin: no
    login_unix_socket: /var/lib/mysql/mysql.sock
    state: present
  when: inventory_hostname_short in groups.sql_node

- name: Add repl user
  mysql_user:
    login_user: root
    login_password: "{{ root_password }}"
    name: repl
    password: "{{ mysql_monitor_password }}"
    update_password: always
    login_port: "{{ mysql_port }}"
    host: "{{ user_whitelist.stdout }}"
    priv: '*.*:REPLICATION SLAVE,SUPER,REPLICATION CLIENT,SELECT'
    sql_log_bin: no
    login_unix_socket: /var/lib/mysql/mysql.sock
    state: present
  when: inventory_hostname_short in groups.sql_node

- name: Add pmm user
  mysql_user:
    login_user: root
    login_password: "{{ root_password }}"
    name: pmm
    password: "{{ pmm_password }}"
    update_password: always
    login_port: "{{ mysql_port }}"
    host: 127.0.0.1
    priv: '*.*:SELECT,RELOAD,PROCESS,SUPER,REPLICATION CLIENT/PERFORMANCE_SCHEMA.*:SELECT,UPDATE,DELETE,DROP'
    sql_log_bin: no
    login_unix_socket: /var/lib/mysql/mysql.sock
    state: present
  when: inventory_hostname_short in groups.sql_node

- name: Add audit user
  mysql_user:
    login_user: root
    login_password: "{{ root_password }}"
    name: repl
    password: "{{ mysql_monitor_password }}"
    update_password: always
    login_port: "{{ mysql_port }}"
    host: "{{ user_whitelist.stdout }}"
    priv: '*.*:REPLICATION SLAVE,SUPER,REPLICATION CLIENT'
    sql_log_bin: no
    login_unix_socket: /var/lib/mysql/mysql.sock
    state: present
  when: inventory_hostname_short in groups.sql_node

- name: Add business user
  mysql_user:
    login_user: root
    login_password: "{{ root_password }}"
    name: "{{ business_user }}"
    password: "{{ business_password }}"
    update_password: always
    login_port: "{{ mysql_port }}"
    host: "{{ user_whitelist.stdout }}"
    priv: "{{ business_user }}.*:SELECT,UPDATE,DELETE,INSERT"
    sql_log_bin: no
    login_unix_socket: /var/lib/mysql/mysql.sock
    state: present
  when: inventory_hostname_short in groups.sql_node

#######shutdown cluster#######

- name: Stop sql_node
  systemd:
    name: mysqld
    state: stopped
  tags: shutdown
  when: inventory_hostname_short in groups.sql_node

- name: Stop management_node
  shell: "ndb_mgm localhost 1186 --execute=shutdown --connect-retries=2"
  tags: shutdown
  when: inventory_hostname_short == "ansible"

#- name: Replace InitFragmentLogFiles=FULL
#  lineinfile:
#    dest: "{{ management_node_dir }}/config.ini"
#    regexp: "^InitFragmentLogFiles="
#    line: "InitFragmentLogFiles=FULL"
#  when: inventory_hostname_short == "ansible"
